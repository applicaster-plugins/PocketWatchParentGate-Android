apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 28

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // applicaster sdk & player
    api "com.applicaster:applicaster-android-sdk:$applicaster_version"
    // ui
    api 'com.android.support.constraint:constraint-layout:1.1.3'
    // util
    api 'com.jakewharton.timber:timber:4.7.1'
    api 'com.jakewharton.rxbinding2:rxbinding-appcompat-v7:2.0.0'

    // network
    implementation('com.squareup.okhttp3:logging-interceptor:3.8.1') {
        because "it's used in applicaster sdk, but not included as dependency"
    }
    api 'com.squareup.okhttp3:okhttp:3.8.1'
    api 'com.squareup.retrofit2:retrofit:2.5.0'
    api 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    api 'com.squareup.retrofit2:converter-gson:2.5.0'
    compileOnly 'com.urbanairship.android:urbanairship-fcm:9.3.1'
    api 'com.bluelinelabs:conductor:2.1.5'
    compileOnly 'com.pawegio.kandroid:kandroid:0.8.4@aar'
}

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--abbrev=0', '--tags'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId GROUP

            def versionFromTag = getVersionName()
            if (versionFromTag != null) {
                // There is a tag existing on the current commit - we can upload to Bintray
                version versionFromTag

                artifactId ARTIFACT_ID
                artifact "build/outputs/aar/" + ARTIFACT_FILE_NAME + "-release.aar"
                pom.withXml {
                    Node root = asNode()
                    root.appendNode('name', ARTIFACT_ID)
                    root.appendNode('description', POM_DESCRIPTION)
                    root.appendNode('url', POM_URL)

                    def issues = root.appendNode('issueManagement')
                    issues.appendNode('system', 'github')
                    issues.appendNode('url', ISSUE_URL)

                    def scm = root.appendNode('scm')
                    scm.appendNode('url', POM_SCM_URL)
                    scm.appendNode('connection', POM_SCM_CONNECTION)
                    scm.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                    def license = root.appendNode('licenses').appendNode('license')
                    license.appendNode('name', POM_LICENCE_NAME)
                    license.appendNode('url', POM_LICENCE_URL)
                    license.appendNode('distribution', POM_LICENCE_DIST)

                    def developer = root.appendNode('developers').appendNode('developer')
                    developer.appendNode('id', POM_DEVELOPER_ID)
                    developer.appendNode('name', POM_DEVELOPER_NAME)
                    developer.appendNode('email', POM_DEVELOPER_EMAIL)

                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.compile.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.implementation.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                    configurations.api.allDependencies.each {
                        if (!it.name.is('unspecified')) {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

static def getBintrayUserProperty() {
    return System.getenv("BINTRAY_USER")
}

static def getBintrayApiKeyProperty() {
    return System.getenv("BINTRAY_API_KEY")
}

bintrayUpload {
    dependsOn "publishMavenJavaPublicationToMavenLocal"
}
bintray {
    user = bintrayUserProperty
    key = bintrayApiKeyProperty
    publications = ['mavenJava']

    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = ARTIFACT_ID
        userOrg = 'applicaster-ltd'
        websiteUrl = POM_URL
        issueTrackerUrl = ISSUE_URL
        vcsUrl = POM_SCM_URL
        licenses = ['Apache-2.0']
        labels = ['aar', 'android']
        version {
            name = getVersionName()
            vcsTag = 'v' + getVersionName()
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task androidJar(type: Jar) {
    from 'build/intermediates/classes/release'
}

artifacts {
    archives androidJar
}
